#!python
Import('env')
Import('config')
Import('name')

# Source files have to be manually added in this case, since cpputest-tree doesn't exists
# until donwloaded and extracted.

src_str = """./cpputest-tree/src/CppUTest/CommandLineArguments.cpp
./cpputest-tree/src/CppUTest/CommandLineTestRunner.cpp
./cpputest-tree/src/CppUTest/JUnitTestOutput.cpp
./cpputest-tree/src/CppUTest/MemoryLeakDetector.cpp
./cpputest-tree/src/CppUTest/MemoryLeakWarningPlugin.cpp
./cpputest-tree/src/CppUTest/SimpleMutex.cpp
./cpputest-tree/src/CppUTest/SimpleString.cpp
./cpputest-tree/src/CppUTest/TeamCityTestOutput.cpp
./cpputest-tree/src/CppUTest/TestFailure.cpp
./cpputest-tree/src/CppUTest/TestFilter.cpp
./cpputest-tree/src/CppUTest/TestHarness_c.cpp
./cpputest-tree/src/CppUTest/TestMemoryAllocator.cpp
./cpputest-tree/src/CppUTest/TestOutput.cpp
./cpputest-tree/src/CppUTest/TestPlugin.cpp
./cpputest-tree/src/CppUTest/TestRegistry.cpp
./cpputest-tree/src/CppUTest/TestResult.cpp
./cpputest-tree/src/CppUTest/TestTestingFixture.cpp
./cpputest-tree/src/CppUTest/Utest.cpp"""

src_ext_str = """./cpputest-tree/src/CppUTestExt/CodeMemoryReportFormatter.cpp
./cpputest-tree/src/CppUTestExt/MemoryReportAllocator.cpp
./cpputest-tree/src/CppUTestExt/MemoryReportFormatter.cpp
./cpputest-tree/src/CppUTestExt/MemoryReporterPlugin.cpp
./cpputest-tree/src/CppUTestExt/MockActualCall.cpp
./cpputest-tree/src/CppUTestExt/MockExpectedCall.cpp
./cpputest-tree/src/CppUTestExt/MockExpectedCallsList.cpp
./cpputest-tree/src/CppUTestExt/MockFailure.cpp
./cpputest-tree/src/CppUTestExt/MockNamedValue.cpp
./cpputest-tree/src/CppUTestExt/MockSupport.cpp
./cpputest-tree/src/CppUTestExt/MockSupportPlugin.cpp
./cpputest-tree/src/CppUTestExt/MockSupport_c.cpp
./cpputest-tree/src/CppUTestExt/OrderedTest.cpp
./cpputest-tree/src/CppUTestExt/CodeMemoryReportFormatter.cpp
./cpputest-tree/src/CppUTestExt/MemoryReportAllocator.cpp
./cpputest-tree/src/CppUTestExt/MemoryReportFormatter.cpp
./cpputest-tree/src/CppUTestExt/MemoryReporterPlugin.cpp
./cpputest-tree/src/CppUTestExt/MockActualCall.cpp
./cpputest-tree/src/CppUTestExt/MockExpectedCall.cpp
./cpputest-tree/src/CppUTestExt/MockExpectedCallsList.cpp
./cpputest-tree/src/CppUTestExt/MockFailure.cpp
./cpputest-tree/src/CppUTestExt/MockNamedValue.cpp
./cpputest-tree/src/CppUTestExt/MockSupport.cpp
./cpputest-tree/src/CppUTestExt/MockSupportPlugin.cpp
./cpputest-tree/src/CppUTestExt/MockSupport_c.cpp
./cpputest-tree/src/CppUTestExt/OrderedTest.cpp"""
#./cpputest-tree/src/CppUTestExt/IEEE754ExceptionsPlugin.cpp
#./cpputest-tree/src/CppUTestExt/IEEE754ExceptionsPlugin.cpp

src = env.MultiLineStringToFiles(src_str)
objs = env.SourceToObjects(src)
src_ext = env.MultiLineStringToFiles(src_ext_str)
objs_ext = env.SourceToObjects(src_ext)
Depends(src + objs + src_ext + objs_ext, env['CPPINCLUDES'])

r = { 'libs' : [], 'path' : [] }
lib_cpputest = env.StaticLibrary('cpputest', src)
r['libs'].append(lib_cpputest)

if config['cpputest_extensions_enabled']:
    lib_cpputestext = env.StaticLibrary('cpputestext', src_ext)
    r['libs'].append(lib_cpputestext)

r['path'].append(Dir('./'))
Return('r')
