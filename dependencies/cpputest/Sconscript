Import('platforms')

# Important headers of cpputest
new_macros = File('./cpputest-tree/include/CppUTest/MemoryLeakDetectorNewMacros.h')
malloc_macros = File('./cpputest-tree/include/CppUTest/MemoryLeakDetectorMallocMacros.h')
cpputest_include = Dir('./cpputest-tree/include')

# Enviroment variables that will be incremented platform wise
cpputest_exports = {
    'CPPDEFINES': ['HAVE_CONFIG_H'],
    # Scons has no support for gcc -include command line option,
    # we have to do some workaround.
    'CXXFLAGS' : [
                  '-include',
                  new_macros,
                  '-include',
                  malloc_macros
                 ],
    'CFLAGS' : [
                  '-include',
                  malloc_macros
                 ],
    'CPPPATH' : [ cpputest_include, Dir('./include') ],
    # This is a ugly workaround becouse scons doesn't detect dependency on C*FLAGS
    # every single build will have to add CPPINCLUDES dependency to their's .o
    'CPPINCLUDES' : [new_macros, malloc_macros]
}

# Download and extract cpputest-3.8.tar.gz to cpputest-tree
Command(target = [new_macros, malloc_macros],
        source = File('./setup-cpputest.sh'),
        action = './${SOURCE} ' + Dir('./cpputest-tree').path )

for plat in platforms:
    name = plat.Name()
    # Modify imported environment to be used by further builds
    plat.Env().Prepend(**cpputest_exports)
    env = plat.Env().Clone()

    # Call script to build cpputest
    config = {'cpputest_extensions_enabled' : plat.CppUTestExtensionsEnabled()}
    mods = env.SConscript('./Sconscript.variant', exports = ['env', 'name', 'config'], variant_dir='./build/' + name, duplicate=0)

    # Add libs to platform env
    plat.Env().Append(LIBS = mods['libs'])
    plat.Env().Append(LIBPATH = mods['path'])
