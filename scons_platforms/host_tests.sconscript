#!python
Import ("default_env")
from PlatformBaseClass import PlatformBaseClass

class HostTestsPlatform(PlatformBaseClass):
    def Name(self):
        return 'host_tests'

    def TargetNameList(self):
        return [self.Default('tests'),
                'coverage', self.Default('coverage_report'),
                str(self._build_binaries['host_tests'])]

    def BuildList(self):
        return [
            'cpputest',
            'app',
            'app_tests',
            'host_tests'
        ]

    def ProfileEnabled(self):
        return True

    def CppUTestExtensionsEnabled (self):
        return True

    def PostBuildTargets(self):
        #
        #
        # Tests Build
        # Use `scons tests` during deveopment, to print tests results and force
        # build of everything.
        tests = Command( target = "tests",
                        source = self._build_binaries['host_tests'],
                        action = "./$SOURCE -v | tee tests_report" )
        #
        #
        # Coverage Commands
        #
        # Re run test and store to file silently
        tests_run = Command( target = "tests_run",
                        source = self._build_binaries['host_tests'],
                        action = "./$SOURCE -v > /dev/null" )

        # Generate .coverage.info for host_tests executables
        Depends(
               Command( target = ".coverage.info.pre",
                        source = [
                                  self._build_dirs['app'],
                                  self._build_dirs['host_tests']
                                 ],
                        action = "lcov -q --capture --directory ${SOURCES[0]} " \
                                 "--ignore-errors=source " \
                                 "--directory ${SOURCES[1]} " \
                                 "--output-file $TARGET "
                                 ),
               tests_run)

        self.CoverageAddExclusion("/usr/include/*")
        self.CoverageAddExclusion("dependencies/*")
        coverage_excludes = " ".join(self._coverage_excludes)

        lcov = Command( target = ".coverage.info",
                        source = ".coverage.info.pre",
                        action = "echo \"" \
                                 + coverage_excludes +
                                 "\" | xargs lcov -q --output-file $TARGET --remove $SOURCE && rm $SOURCE"
                                 )

        codecov_ignore = "-g \"" + coverage_excludes.replace(" ", "\" -g \"") + "\""
        Command( target = ".codecov.ignore",
                 source = "",
                 action = "echo \'" + codecov_ignore + "\' > $TARGET")

        # Print and save coverage_report
        coverage_report = Command( target = "coverage_report",
                                   source = lcov,
                                   action = "lcov --summary $SOURCE" )
        # Generate html files for coverage
        coverage_html = Command( target = "coverage",
                                   source = lcov,
                                   action = "genhtml -q $SOURCE --output-directory $TARGET" )

    def _SetupEnv(self):
        self._env = default_env.Clone (
                # We want lot's of warning on host_tests
                CXXFLAGS = ['-std=gnu++0x', '-g3', '-O0', '-fno-inline', '-pthread',
                    '-Wno-c++11-long-long', '-Wno-long-long', '-Wall', '-Wextra', '-Wshadow', '-Wswitch-default', '-Wswitch-enum',
                    '-Wconversion', '-Wsign-conversion', '-Woverloaded-virtual', '-Wno-disabled-macro-expansion',
                    '-Wno-padded', '-Wno-reserved-id-macro', '-Wno-keyword-macro', '-Wno-global-constructors',
                    '-Wno-exit-time-destructors', '-Wno-weak-vtables', '-Wno-old-style-cast'],
                CFLAGS  = ['-std=gnu11', '-g3', '-O0', '-fno-inline',
                    '-Wall', '-Wextra', '-Wswitch-default', '-Wswitch-enum', '-Wconversion', '-Wno-long-long'],
                CPPDEFINES = ['APP_ENABLE_DEBUG'],
                LIBS = ['pthread'],
                CPPINCLUDES = []
        )

instance = HostTestsPlatform()
Return('instance')
